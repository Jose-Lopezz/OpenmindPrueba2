{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class PublicGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    if (!this.authService.isAuthenticated) {\n      return true;\n    } else {\n      this.router.navigate(['/dashboard']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function PublicGuard_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || PublicGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PublicGuard,\n    factory: PublicGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["PublicGuard","constructor","authService","router","canActivate","isAuthenticated","navigate","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["/home/project/src/app/guards/public.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PublicGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(): boolean {\n    if (!this.authService.isAuthenticated) {\n      return true;\n    } else {\n      this.router.navigate(['/dashboard']);\n      return false;\n    }\n  }\n}"],"mappings":";;;AAOA,OAAM,MAAOA,WAAW;EACtBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CAAA;IACT,IAAI,CAAC,IAAI,CAACF,WAAW,CAACG,eAAe,EAAE;MACrC,OAAO,IAAI;IACb,CAAC,MAAM;MACL,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;MACpC,OAAO,KAAK;IACd;EACF;EAAC,QAAAC,CAAA,G;qCAbUP,WAAW,EAAAQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXd,WAAW;IAAAe,OAAA,EAAXf,WAAW,CAAAgB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}