{"ast":null,"code":"import { signal } from '@angular/core';\nimport { of, delay } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.userSignal = signal(null);\n    // Mock users for demonstration\n    this.mockUsers = [{\n      id: '1',\n      name: 'Juan Pérez',\n      email: 'juan@email.com',\n      password: '123456'\n    }, {\n      id: '2',\n      name: 'María García',\n      email: 'maria@email.com',\n      password: '123456'\n    }];\n  }\n  get user() {\n    return this.userSignal.asReadonly();\n  }\n  get isAuthenticated() {\n    return this.userSignal() !== null;\n  }\n  login(email, password) {\n    const foundUser = this.mockUsers.find(u => u.email === email && u.password === password);\n    if (foundUser) {\n      this.userSignal.set({\n        id: foundUser.id,\n        name: foundUser.name,\n        email: foundUser.email\n      });\n      return of(true).pipe(delay(1000));\n    }\n    return of(false).pipe(delay(1000));\n  }\n  register(name, email, password) {\n    const newUser = {\n      id: Math.random().toString(36).substr(2, 9),\n      name,\n      email,\n      password\n    };\n    this.mockUsers.push(newUser);\n    this.userSignal.set({\n      id: newUser.id,\n      name: newUser.name,\n      email: newUser.email\n    });\n    return of(true).pipe(delay(1000));\n  }\n  logout() {\n    this.userSignal.set(null);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["signal","of","delay","AuthService","constructor","userSignal","mockUsers","id","name","email","password","user","asReadonly","isAuthenticated","login","foundUser","find","u","set","pipe","register","newUser","Math","random","toString","substr","push","logout","_","_2","factory","ɵfac","providedIn"],"sources":["/home/project/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable, signal } from '@angular/core';\nimport { User } from '../models/user.model';\nimport { Observable, of, delay } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private userSignal = signal<User | null>(null);\n  \n  // Mock users for demonstration\n  private mockUsers = [\n    { id: '1', name: 'Juan Pérez', email: 'juan@email.com', password: '123456' },\n    { id: '2', name: 'María García', email: 'maria@email.com', password: '123456' }\n  ];\n\n  get user() {\n    return this.userSignal.asReadonly();\n  }\n\n  get isAuthenticated() {\n    return this.userSignal() !== null;\n  }\n\n  login(email: string, password: string): Observable<boolean> {\n    const foundUser = this.mockUsers.find(u => u.email === email && u.password === password);\n    \n    if (foundUser) {\n      this.userSignal.set({ \n        id: foundUser.id, \n        name: foundUser.name, \n        email: foundUser.email \n      });\n      return of(true).pipe(delay(1000));\n    }\n    \n    return of(false).pipe(delay(1000));\n  }\n\n  register(name: string, email: string, password: string): Observable<boolean> {\n    const newUser = { \n      id: Math.random().toString(36).substr(2, 9), \n      name, \n      email, \n      password \n    };\n    \n    this.mockUsers.push(newUser);\n    this.userSignal.set({ \n      id: newUser.id, \n      name: newUser.name, \n      email: newUser.email \n    });\n    \n    return of(true).pipe(delay(1000));\n  }\n\n  logout(): void {\n    this.userSignal.set(null);\n  }\n}"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAElD,SAAqBC,EAAE,EAAEC,KAAK,QAAQ,MAAM;;AAK5C,OAAM,MAAOC,WAAW;EAHxBC,YAAA;IAIU,KAAAC,UAAU,GAAGL,MAAM,CAAc,IAAI,CAAC;IAE9C;IACQ,KAAAM,SAAS,GAAG,CAClB;MAAEC,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,YAAY;MAAEC,KAAK,EAAE,gBAAgB;MAAEC,QAAQ,EAAE;IAAQ,CAAE,EAC5E;MAAEH,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,cAAc;MAAEC,KAAK,EAAE,iBAAiB;MAAEC,QAAQ,EAAE;IAAQ,CAAE,CAChF;;EAED,IAAIC,IAAIA,CAAA;IACN,OAAO,IAAI,CAACN,UAAU,CAACO,UAAU,EAAE;EACrC;EAEA,IAAIC,eAAeA,CAAA;IACjB,OAAO,IAAI,CAACR,UAAU,EAAE,KAAK,IAAI;EACnC;EAEAS,KAAKA,CAACL,KAAa,EAAEC,QAAgB;IACnC,MAAMK,SAAS,GAAG,IAAI,CAACT,SAAS,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACR,KAAK,KAAKA,KAAK,IAAIQ,CAAC,CAACP,QAAQ,KAAKA,QAAQ,CAAC;IAExF,IAAIK,SAAS,EAAE;MACb,IAAI,CAACV,UAAU,CAACa,GAAG,CAAC;QAClBX,EAAE,EAAEQ,SAAS,CAACR,EAAE;QAChBC,IAAI,EAAEO,SAAS,CAACP,IAAI;QACpBC,KAAK,EAAEM,SAAS,CAACN;OAClB,CAAC;MACF,OAAOR,EAAE,CAAC,IAAI,CAAC,CAACkB,IAAI,CAACjB,KAAK,CAAC,IAAI,CAAC,CAAC;IACnC;IAEA,OAAOD,EAAE,CAAC,KAAK,CAAC,CAACkB,IAAI,CAACjB,KAAK,CAAC,IAAI,CAAC,CAAC;EACpC;EAEAkB,QAAQA,CAACZ,IAAY,EAAEC,KAAa,EAAEC,QAAgB;IACpD,MAAMW,OAAO,GAAG;MACdd,EAAE,EAAEe,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MAC3CjB,IAAI;MACJC,KAAK;MACLC;KACD;IAED,IAAI,CAACJ,SAAS,CAACoB,IAAI,CAACL,OAAO,CAAC;IAC5B,IAAI,CAAChB,UAAU,CAACa,GAAG,CAAC;MAClBX,EAAE,EAAEc,OAAO,CAACd,EAAE;MACdC,IAAI,EAAEa,OAAO,CAACb,IAAI;MAClBC,KAAK,EAAEY,OAAO,CAACZ;KAChB,CAAC;IAEF,OAAOR,EAAE,CAAC,IAAI,CAAC,CAACkB,IAAI,CAACjB,KAAK,CAAC,IAAI,CAAC,CAAC;EACnC;EAEAyB,MAAMA,CAAA;IACJ,IAAI,CAACtB,UAAU,CAACa,GAAG,CAAC,IAAI,CAAC;EAC3B;EAAC,QAAAU,CAAA,G;qCApDUzB,WAAW;EAAA;EAAA,QAAA0B,EAAA,G;WAAX1B,WAAW;IAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}